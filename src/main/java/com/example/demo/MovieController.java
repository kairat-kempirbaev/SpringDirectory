package com.example.demo;

import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.example.demo.Projections.MoviesSpecific;
import com.example.demo.entities.*;
import com.example.demo.repository.*;
import com.example.demo.service.MoviesService;

@Controller // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MovieController {
  @Autowired // This means to get the bean called MoviesRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private MoviesRepository moviesRepository;
  @Autowired
  private MoviesService movieService;

  @PostMapping(path="/add") // Map ONLY POST Requests
  public @ResponseBody String addNewUser (@RequestParam String name
      , @RequestParam String email) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

//    Users n = new Users();
//    n.setName(name);
//    n.setEmail(email);
//    userRepository.save(n);
    return "Saved";
  }

  @GetMapping(path="/all")
  public @ResponseBody Iterable<MoviesSpecific> getAllUsers(@RequestParam Map<String,String> allParams) {
	  //return moviesRepository.findAll();
	  return movieService.listAll(Integer.parseInt(allParams.get("page")),Integer.parseInt(allParams.get("limit")));
  }
  
  @GetMapping(path="/api/single-movie")
  public @ResponseBody Optional<Movies> getMovie(@RequestParam String id) {
    // This returns a JSON or XML with the users

	  return null;//moviesRepository.findById(id);
  }
}